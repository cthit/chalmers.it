generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model NewsPost {
  id                   Int            @id @default(autoincrement())
  titleSv              String
  titleEn              String
  contentSv            String
  contentEn            String
  writtenByGammaUserId String
  writtenFor           DivisionGroup? @relation(fields: [divisionGroupId], references: [id])
  mainImage            Media?         @relation(fields: [mediaSha256], references: [sha256])
  connectedEvents      Event[]
  scheduledPublish     DateTime?
  status               PostStatus     @default(DRAFT)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  divisionGroupId      Int?
  mediaSha256          String?
}

model DivisionGroup {
  id                Int            @id @default(autoincrement())
  gammaSuperGroupId String         @unique
  slug              String         @unique
  prettyName        String
  descriptionSv     String
  descriptionEn     String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  NewsPost          NewsPost[]
  DivisionPages     DivisionPage[]
}

model DivisionPage {
  id              Int            @id @default(autoincrement())
  parentId        Int?
  priority        Int            @default(0)
  parent          DivisionPage?  @relation("DivisionPageTree", fields: [parentId], references: [id])
  children        DivisionPage[] @relation("DivisionPageTree")
  titleSv         String
  titleEn         String
  contentSv       String
  contentEn       String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  DivisionGroup   DivisionGroup? @relation(fields: [divisionGroupId], references: [id])
  divisionGroupId Int?
  slug            String
}

model Event {
  id            Int       @id @default(autoincrement())
  titleSv       String
  titleEn       String
  descriptionEn String
  descriptionSv String
  fullDay       Boolean
  startTime     DateTime
  endTime       DateTime
  location      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  NewsPost      NewsPost? @relation(fields: [newsPostId], references: [id])
  newsPostId    Int?
}

model Sponsor {
  id          Int         @id @default(autoincrement())
  nameSv      String
  nameEn      String
  url         String
  logo        Media?      @relation(fields: [mediaSha256], references: [sha256])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  mediaSha256 String?
  type        SponsorType @default(PARTNER)
}

model DivisionDocument {
  id              Int           @id @default(autoincrement())
  DivisionGroup   DivisionGroup @relation(fields: [divisionGroupId], references: [id])
  divisionGroupId Int
  media           Media         @relation(fields: [mediaSha256], references: [sha256])
  mediaSha256     String
  titleSv         String
  titleEn         String
  descriptionSv   String
  descriptionEn   String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  type            DocumentType  @default(MISC)
}

model Media {
  sha256    String     @id
  extension String
  createdAt DateTime   @default(now())
  NewsPost  NewsPost[]
  Sponsor   Sponsor[]
}

model EventNotifiers {
  id       Int          @id @default(autoincrement())
  type     NotifierType
  url      String
  language Language
}

enum DocumentType {
  PROTOCOL
  BUDGET
  BUSINESS_PLAN
  FINANCIAL_REPORT
  BUSINESS_REPORT
  MISC
}

enum NotifierType {
  DISCORD
  SLACK
}

enum Language {
  SV
  EN
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  DELETED
}

enum SponsorType {
  PARTNER
  MAIN_PARTNER
}
